// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviePage.Context;

#nullable disable

namespace MoviePage.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoviePage.Models.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Casts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Elijah",
                            LastName = "Wood"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Liv",
                            LastName = "Tyler"
                        });
                });

            modelBuilder.Entity("MoviePage.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Science-Fiction"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Drama"
                        });
                });

            modelBuilder.Entity("MoviePage.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LasttName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Peter",
                            LasttName = "Jackson"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Martin",
                            LasttName = "Scorsese"
                        });
                });

            modelBuilder.Entity("MoviePage.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishedDate")
                        .HasColumnType("int");

                    b.Property<string>("TrailerHttp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The Lord of the Rings is the saga of a group of sometimes reluctant heroes who set forth to save their world from consummate evil. Its many worlds and creatures were drawn from Tolkien's extensive knowledge of philology and folklore.",
                            DirectorId = 1,
                            MovieName = "Lord of the rings I",
                            PublishedDate = 2001,
                            TrailerHttp = "https://www.youtube.com/embed/V75dMMIW2B4"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Plot. In 1954, U.S. Marshal Edward \"Teddy\" Daniels and his new partner Chuck Aule travel to Ashecliffe Hospital for the criminally insane on Shutter Island, Boston Harbor to investigate the disappearance of Rachel Solando, a patient of the hospital who had previously drowned her three children.",
                            DirectorId = 2,
                            MovieName = "Shutter Island",
                            PublishedDate = 2010,
                            TrailerHttp = "https://www.youtube.com/embed/5iaYLCiq5RM"
                        });
                });

            modelBuilder.Entity("MoviePage.Models.MovieAndCast", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CastId");

                    b.HasIndex("CastId");

                    b.ToTable("MoviesAndCasts");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CastId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            CastId = 2
                        },
                        new
                        {
                            MovieId = 1,
                            CastId = 3
                        });
                });

            modelBuilder.Entity("MoviePage.Models.MovieAndCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MoviesAndCategories");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("MoviePage.Models.Movie", b =>
                {
                    b.HasOne("MoviePage.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MoviePage.Models.MovieAndCast", b =>
                {
                    b.HasOne("MoviePage.Models.Cast", "Cast")
                        .WithMany("MovieAndCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePage.Models.Movie", "Movie")
                        .WithMany("MovieAndCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviePage.Models.MovieAndCategory", b =>
                {
                    b.HasOne("MoviePage.Models.Category", "Category")
                        .WithMany("MovieAndCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePage.Models.Movie", "Movie")
                        .WithMany("MovieAndCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviePage.Models.Cast", b =>
                {
                    b.Navigation("MovieAndCasts");
                });

            modelBuilder.Entity("MoviePage.Models.Category", b =>
                {
                    b.Navigation("MovieAndCategories");
                });

            modelBuilder.Entity("MoviePage.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MoviePage.Models.Movie", b =>
                {
                    b.Navigation("MovieAndCasts");

                    b.Navigation("MovieAndCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
